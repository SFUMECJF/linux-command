/*
  utcsh - The UTCS Shell

  <Put your name and CS login ID here>
*/

/* Read the additional functions from util.h. They may be beneficial to you
in the future */
#include "util.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#include <ctype.h>
#include <signal.h>
#include <sys/wait.h>
#include <errno.h>

/* Global variables */
#define DEBUG 0 /* Debugging flag */

/* The array for holding shell paths. Can be edited by the functions in util.c*/
char shell_paths[MAX_ENTRIES_IN_SHELLPATH][MAX_CHARS_PER_CMDLINE];
static char prompt[] = "utcsh> "; /* Command line prompt */
static char *default_shell_path[2] = {"/bin", NULL};//./tests/test-utils  /bin
/* End Global Variables */

/* Convenience struct for describing a command. Modify this struct as you see
 * fit--add extra members to help you write your code. */
struct Command {
  char **args;      /* Argument array for the command */
  char *outputFile; /* Redirect target for file (NULL means no redirect) */
};
int num;        /* Number of arguments in the command */
/* Here are the functions we recommend you implement */
char **tokenize_command_line(char *cmdline);
struct Command parse_command(char **tokens);
void eval(struct Command *cmd);
int try_exec_builtin(struct Command *cmd);
void exec_external_cmd(struct Command *cmd);

/* Helper functions */
void print_error();
void merge_lines(char *line);
/* Main REPL: read, evaluate, and print. This function should remain relatively
   short: if it grows beyond 60 lines, you're doing too much in main() and
   should try to move some of that work into other functions. */
int main(int argc, char **argv) {
  set_shell_path(default_shell_path);

  /* These two lines are just here to suppress certain warnings. You should
   * delete them when you implement Part 1.4 */
  // (void)argc;
  // (void)argv;
  if (argc == 2) {
    // then run in script mode
    // the script we're running will be argv[1]
    // fopen(argv[1], "r") --> if this returns NULL, throw an error
    FILE *script_ptr = fopen(argv[1], "r");
    if (script_ptr == NULL) {
      print_error();
      // exit(1);
    } else {
      // test 12, empty script
      int empty_line = 0;
      char line[MAX_CHARS_PER_CMDLINE] = {'\0'};
      while (fgets(line, MAX_CHARS_PER_CMDLINE, script_ptr) != NULL) {
        empty_line = 1;
        merge_lines(line);
        // parse each line
        char **tokenized_cmd = tokenize_command_line(line); 
        struct Command parsed_cmd = parse_command(tokenized_cmd);

        if (parsed_cmd.args == NULL) {
          print_error();
          exit(1);
        }

        eval(&parsed_cmd); 
      }    
      if (empty_line == 0) {
        print_error();
        exit(1);
      }
    }

  } else if (argc > 2) {
    // for test 11
    // then throw an error
    print_error();
    exit(1);
  }else {
      while (1) {
      printf("%s", prompt);

      /* Read */
      size_t size = MAX_CHARS_PER_CMDLINE;
      char *command_buffer = (char*) malloc(size);

      size_t num_characters = getline(&command_buffer, &size, stdin); 

      if (num_characters == 0) {
        print_error();     // error handling for if command is empty?
      }

      // checks for end of file
      if (feof(stdin)) {
        exit(0);
      }

      merge_lines(command_buffer);

      char **tokenized_cmd = tokenize_command_line(command_buffer); 
      
      struct Command parsed_cmd = parse_command(tokenized_cmd);

      
      /* Evaluate */
      eval(&parsed_cmd);  // c syntax??

      /* Print (optional) */
    }
  }

 
  return 0;
}

/* NOTE: In the skeleton code, all function bodies below this line are dummy
implementations made to avoid warnings. You should delete them and replace them
with your own implementation. */

/** Turn a command line into tokens with strtok
 *
 * This function turns a command line into an array of arguments, making it
 * much easier to process. First, you should figure out how many arguments you
 * have, then allocate a char** of sufficient size and fill it using strtok()
 */
char **tokenize_command_line(char *cmdline) {
  size_t length = strlen(cmdline);
  char** all_tokens = (char**) calloc(1, sizeof(char*) * length);
  int index = 0;
  
  char* token = strtok(cmdline, " ");

  while(token != NULL) {
    all_tokens[index] = token;
    // all_tokens = (char**) realloc(all_tokens, sizeof(char*) * (index + 1));
    token = strtok(NULL, " ");
    index++;
  }
  num = index;
  all_tokens[index] = NULL;

  // (void)cmdline;
  return all_tokens;
}

/** Turn tokens into a command.
 *
 * The `struct Command` represents a command to execute. This is the preferred
 * format for storing information about a command, though you are free to change
 * it. This function takes a sequence of tokens and turns them into a struct
 * Command.
 */
struct Command parse_command(char **tokens) {
  struct Command dummy = {.args = tokens, .outputFile = NULL};
  return dummy;
}

/** Evaluate a single command
 *
 * Both built-ins and external commands can be passed to this function--it
 * should work out what the correct type is and take the appropriate action.
 */
void eval(struct Command *cmd) {

  // from test 3, there is no need to print error
  // there should be white and tab detection in exec_external_cmd child process
    int blank_flag = 1;      
      for (int i = 0; cmd -> args[i] != NULL; i++)
      {
        for (unsigned int j = 0; j < strlen(cmd -> args[i]); j++)
        {
          if (cmd -> args[i][j] != ' ' 
          && cmd -> args[i][j] != '	'
          && cmd -> args[i][j] != 0x9 // \t
          && cmd -> args[i][j] != '\n')
          {
            blank_flag = 0;
            break;
          }
          
        }
      }
      if (blank_flag == 1)
      {
        return;
      }
  // end of test 3
  if (!try_exec_builtin(cmd)) {
    exec_external_cmd(cmd);
  }

  
  return;
}

/** Execute built-in commands
 *
 * If the command is a built-in command, immediately execute it and return 1
 * If the command is not a built-in command, do nothing and return 0
 */
int try_exec_builtin(struct Command *cmd) {
  char* token = cmd -> args[0];
  // !strcmp(token, "exit") is for test 7
  if (!strcmp(token, "exit\n") || !strcmp(token, "exit")) {
    if (cmd -> args[1] != NULL) {
      print_error();
    }
    exit(0);
  } else if (!strcmp(token, "cd")){
    // for test 5
    if(cmd -> args[2] != NULL){
        //error handling for cd
        print_error();
        return 1;
    } else {
      char* path = cmd -> args[1];
      int path_length = strlen(path);
      path_length = path_length;
      if (path[path_length - 1] == '\n') {
        path[strlen(path) - 1] = '\0';
      }
      if(chdir(path) == -1){
        //error handling for cd test 6
        print_error();
      }
      return 1;
    }
  } else if(!strcmp(token, "cd\n")) {
        //test 4
        print_error();
        return 1;
  } else if (!strcmp(token, "path") || !strcmp(token, "path\n")) {
    if (cmd -> args[1] != NULL) {
      char *shell_path[2] = {"test_set_the_length_of_the_path_longlong", NULL};
      char *path = cmd -> args[1];
      path[strlen(path) - 1] = '\0';
      //default_shell_path[0] = path;
      // strcpy(shell_path[0], path);
      shell_path[0] = path;
      set_shell_path(shell_path);
    }
    // else {
    //   print_error();
    // }
      
      return 1;
  } else {
    return 0;
  }
// from test 2, return 1 if built-in command, dont execute external command
  return 1; // 
}



/** Execute an external command
 *
 * Execute an external command by fork-and-exec. Should also take care of
 * output redirection, if any is requested
 */
void exec_external_cmd(struct Command *cmd) {

  int child = fork();
  // test 13, 
  int valid_input = 0;
  if (child)
  {
    wait(NULL);
  }
  else
  {

    // TODO : need handle (cmd->outputFile)
 
    // current path
    int index = 1;
    while (cmd -> args[index] != NULL) {
        if (cmd -> args[index][strlen(cmd -> args[index]) - 1] == '\n') {
            cmd -> args[index][strlen(cmd -> args[index]) - 1] = '\0';
        }
        index++;
    }// echo hello\n\n


    // test 18
    // int s = execv(cmd->args[0], cmd->args);
    // if (s == 0) {
    //   exit(0);
    // }

    // test 18
    if (cmd -> args[1] == NULL && cmd -> args[0][strlen(cmd -> args[0]) - 1] == '\n') {
        cmd -> args[0][strlen(cmd -> args[0]) - 1] = '\0';
    }

    // test 8, such as echo hello is OK.
    if (0 != strcmp("/", cmd->args[0]))
    {
      int i;
      for (i = 0; i < 256 && shell_paths[i] != NULL; i++)
      {
        // printf("111 :%s\n", shell_paths[i]);
        char *pathAndName = strcat(shell_paths[i], "/");
        pathAndName = strcat(pathAndName, cmd->args[0]);
        int state = execv(pathAndName, cmd->args);
        if (state == 0)
        {
          valid_input = 1;
          break;
        }
      }
    }
    if (valid_input == 0)
    {
        print_error();
      
    }
    exit(0);
  }

  return;

}


//print error massege and continue
void print_error(){
  char emsg[30] = {"An error has occurred\n"};
  // fprintf(stderr, emsg);
  size_t nbytes_written = write(STDERR_FILENO, emsg, strlen(emsg));
  if(nbytes_written != strlen(emsg)){
    exit(2);  // Shouldn't really happen -- if it does, error is unrecoverable
  }
}
// test 14
void merge_lines(char *dest) {
  int index_src = 0;
  int index_dest = 0;
  char src[MAX_CHARS_PER_CMDLINE] = {'\0'};
  int blank_flag[MAX_CHARS_PER_CMDLINE] = {0};
  strcpy(src, dest);

  while (src[index_src] != '\0' 
  && (src[index_src] == ' ' || src[index_src] == '\t' || src[index_src] == '\n')) {
    index_src++;
  }

  if (src[index_src] == '\0') {// a blank line
    return;
  }

  for (unsigned int i = 0; i < strlen(src); i++) {
    if (src[i] == ' ' || src[i] == '\t' || src[i] == '\n') {
      blank_flag[i] = 1;
    }
  }

  for (unsigned int i = index_src; i < strlen(src) - 1; i++) {
    if (!blank_flag[i]) {
      dest[index_dest] = src[i];
      index_dest++;
    }
    else if (blank_flag[i] && (int)i - 1 >= 0 && !blank_flag[i - 1]) {
      dest[index_dest] = ' ';
      index_dest++;
    }
    
  }

  dest[index_dest + 1] = '\0';

}